{"version":3,"file":"Pedometer.js","sourceRoot":"","sources":["../src/Pedometer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,kBAAkB,EAAE,MAAM,WAAW,CAAC;AAC7D,OAAO,SAAS,MAAM,WAAW,CAAC;AAElC,MAAM,qBAAqB,GAAG,IAAI,YAAY,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;AAMrF,MAAM,UAAU,cAAc,CAAC,QAAiC;IAC9D,OAAO,qBAAqB,CAAC,WAAW,CAAC,0BAA0B,EAAE,QAAQ,CAAC,CAAC;AACjF,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,KAAW,EAAE,GAAS;IAC5D,SAAS,CAAC,KAAK,IAAI,GAAG,EAAE,sDAAsD,CAAC,CAAC;IAChF,OAAO,MAAM,kBAAkB,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;AACtG,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,OAAO,MAAM,kBAAkB,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,CAAC;AACvE,CAAC","sourcesContent":["import { EventEmitter, NativeModulesProxy } from 'expo-core';\nimport invariant from 'invariant';\n\nconst PedometerEventEmitter = new EventEmitter(NativeModulesProxy.ExponentPedometer);\n\ntype PedometerResult = { steps: number };\ntype PedometerUpdateCallback = (result: PedometerResult) => void;\ntype PedometerListener = { remove: () => void };\n\nexport function watchStepCount(callback: PedometerUpdateCallback): PedometerListener {\n  return PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);\n}\n\nexport async function getStepCountAsync(start: Date, end: Date): Promise<PedometerResult> {\n  invariant(start <= end, 'Pedometer: The start date must precede the end date.');\n  return await NativeModulesProxy.ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime());\n}\n\nexport async function isAvailableAsync(): Promise<boolean> {\n  return await NativeModulesProxy.ExponentPedometer.isAvailableAsync();\n}\n"]}