buildscript {
  repositories {
    google()
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.2.1'
    classpath 'de.undercouch:gradle-download-task:2.0.0'
  }
}

apply plugin: 'com.android.library'
apply plugin: 'maven'

group = 'host.exp.exponent'
version = '2.0.0'

import de.undercouch.gradle.tasks.download.Download
import org.apache.tools.ant.taskdefs.condition.Os

// Custom task for NDK module

def distDir = new File("$projectDir/dist")

def getNdkBuildName() {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    return "ndk-build.cmd"
  } else {
    return "ndk-build"
  }
}

def findNdkBuildFullPath() {
  // we allow to provide full path to ndk-build tool
  if (hasProperty('ndk.command')) {
    return property('ndk.command')
  }
  // or just a path to the containing directory
  if (hasProperty('ndk.path')) {
    def ndkDir = property('ndk.path')
    return new File(ndkDir, getNdkBuildName()).getAbsolutePath()
  }
  if (System.getenv('ANDROID_NDK') != null) {
    def ndkDir = System.getenv('ANDROID_NDK')
    return new File(ndkDir, getNdkBuildName()).getAbsolutePath()
  }
  def ndkDir = android.hasProperty('plugin') ? android.plugin.ndkFolder :
      plugins.getPlugin('com.android.library').hasProperty('sdkHandler') ?
          plugins.getPlugin('com.android.library').sdkHandler.getNdkFolder() :
          android.ndkDirectory.absolutePath
  if (ndkDir) {
    return new File(ndkDir, getNdkBuildName()).getAbsolutePath()
  }
  return null
}

def getNdkBuildFullPath() {
  def ndkBuildFullPath = findNdkBuildFullPath()
  if (ndkBuildFullPath == null) {
    throw new GradleScriptException(
        "ndk-build binary cannot be found, check if you've set " +
            "\$ANDROID_NDK environment variable correctly or if ndk.dir is " +
            "setup in local.properties",
        null)
  }
  if (!new File(ndkBuildFullPath).canExecute()) {
    throw new GradleScriptException(
        "ndk-build binary " + ndkBuildFullPath + " doesn't exist or isn't executable.\n" +
            "Check that the \$ANDROID_NDK environment variable, or ndk.dir in local.proerties, is set correctly.\n" +
            "(On Windows, make sure you escape backslashes in local.properties or use forward slashes, e.g. C:\\\\ndk or C:/ndk rather than C:\\ndk)",
        null)
  }
  return ndkBuildFullPath
}

task downloadJSCHeaders(type: Download) {
  // in sync with webkit SVN revision 174650
  def jscAPIBaseURL = 'https://raw.githubusercontent.com/WebKit/webkit/38b15a3ba3c1b0798f2036f7cea36ffdc096202e/Source/JavaScriptCore/API/'
  def jscHeaderFiles = ['JavaScript.h', 'JSBase.h', 'JSContextRef.h', 'JSObjectRef.h', 'JSRetainPtr.h', 'JSStringRef.h', 'JSValueRef.h', 'WebKitAvailability.h']
  def output = new File("$buildDir/downloads", 'jsc')

  output.mkdirs()
  src(jscHeaderFiles.collect { headerName -> "$jscAPIBaseURL$headerName" })
  onlyIfNewer true
  overwrite false
  dest output
}

// Create Android.mk library module based on so files from mvn + include headers fetched from webkit.org
task prepareJSC(dependsOn: downloadJSCHeaders) {
  doLast {
    copy {
      from zipTree(configurations.compile.fileCollection { dep -> dep.name == 'android-jsc' }.singleFile)
      from { downloadJSCHeaders.dest }
      from 'src/main/jni/jsc/Android.mk'
      include 'jni/**/*.so', '*.h', 'Android.mk'
      filesMatching('*.h', { fname -> fname.path = "JavaScriptCore/${fname.path}" })
      into "$buildDir/jsc"
    }
  }
}

task buildNdkLib(dependsOn: prepareJSC, type: Exec) {
  inputs.dir('src/main/jni')
  inputs.dir('../cpp')
  outputs.dir("$buildDir/expo-gl-ndk/all")

  commandLine getNdkBuildFullPath(),
      'NDK_PROJECT_PATH=null',
      "NDK_APPLICATION_MK=$projectDir/src/main/jni/Application.mk",
      "NDK_OUT=$temporaryDir",
      "NDK_LIBS_OUT=$buildDir/expo-gl-ndk/all",
      "JSC_DIR=$buildDir/jsc",
      '-C', file('src/main/jni').absolutePath,
      '--jobs', Runtime.runtime.availableProcessors()
}

task cleanNdkLib(type: Exec) {
  commandLine getNdkBuildFullPath(),
      "JSC_DIR=$buildDir/jsc",
      '-C', file('src/main/jni').absolutePath,
      'clean'
}

task packageNdkLibs(dependsOn: buildNdkLib, type: Copy) {
  distDir.mkdirs()

  from "$buildDir/expo-gl-ndk/all"
  exclude '**/libjsc.so'
  exclude '**/libgnustl_shared.so'
  into distDir.path
}

//Upload android library to maven with javadoc and android sources
configurations {
  deployerJars
}

//Creating sources with comments
task androidSourcesJar(type: Jar) {
  classifier = 'sources'
  from android.sourceSets.main.java.srcDirs
}

//Put the androidSources and javadoc to the artifacts
artifacts {
  archives androidSourcesJar
}

uploadArchives {
  repositories {
    mavenDeployer {
      configuration = configurations.deployerJars
      repository(url: mavenLocal().url)
    }
  }
}

android {
  compileSdkVersion 26

  defaultConfig {
    minSdkVersion 21
    targetSdkVersion 26
    versionCode 11
    versionName "2.0.0"

    ndk {
      abiFilters 'armeabi-v7a', 'x86'
      moduleName 'expo-gl'
    }

    sourceSets.main {
      jni.srcDirs = []
      jniLibs.srcDir "$buildDir/expo-gl-ndk/exported"
    }
  }
  lintOptions {
    abortOnError false
  }
}

repositories {
  mavenCentral()
}

if (new File(rootProject.projectDir.parentFile, 'pubspec.yaml').exists()) {
  apply from: project(":expo_core").file("../expo-core.gradle")
} else if (new File(rootProject.projectDir.parentFile, 'package.json').exists()) {
  apply from: project(":expo-core").file("../expo-core.gradle")
} else {
  throw new GradleException(
      "'expo-core.gradle' was not found in the usual Flutter or React Native dependency locations. " +
          "This package can only be used in such projects. Are you sure you've installed the dependencies properly?")
}

dependencies {
  expendency 'expo-core'

  compileOnly 'com.facebook.soloader:soloader:0.5.1'

  // it must be `compile` instead of `implementation` or `api`
  // cause the later dependencies are not accessible by configurations.compile or similar :(
  compile 'org.webkit:android-jsc:r174650'
}
