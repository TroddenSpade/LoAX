{"version":3,"file":"StoreReview.js","sourceRoot":"","sources":["../../src/StoreReview/StoreReview.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,gBAAgB,CAAC;AACvC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAEjD,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AAExD;;;;GAIG;AACH,MAAM,UAAU,WAAW;IACzB,OAAO,mBAAmB,IAAI,mBAAmB,CAAC,WAAW,CAAC;AAChE,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,aAAa;IACjC,IAAI,mBAAmB,IAAI,mBAAmB,CAAC,aAAa,EAAE;QAC5D,mBAAmB,CAAC,aAAa,EAAE,CAAC;KACrC;SAAM;QACL;;WAEG;QACH,MAAM,GAAG,GAAG,QAAQ,EAAE,CAAC;QACvB,IAAI,GAAG,EAAE;YACP,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAChD,IAAI,CAAC,SAAS,EAAE;gBACd,OAAO,CAAC,GAAG,CAAC,0DAA0D,EAAE,GAAG,CAAC,CAAC;aAC9E;iBAAM;gBACL,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;aAC7B;SACF;aAAM;YACL,iDAAiD;YACjD,OAAO,CAAC,GAAG,CACT,oKAAoK,CACrK,CAAC;SACH;KACF;AACH,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,QAAQ;IACtB,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,CAAC;IACxB,IAAI,EAAE,KAAK,KAAK,EAAE;QAChB,OAAO,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC;KAC3C;SAAM,IAAI,EAAE,KAAK,SAAS,EAAE;QAC3B,OAAO,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC;KAChD;IACD,MAAM,IAAI,KAAK,CAAC,8CAA8C,EAAE,EAAE,CAAC,CAAC;AACtE,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,SAAS;IACvB,OAAO,CAAC,CAAC,QAAQ,EAAE,IAAI,WAAW,EAAE,CAAC;AACvC,CAAC","sourcesContent":["import Constants from 'expo-constants';\nimport { Linking, Platform } from 'react-native';\n\nimport ExponentStoreReview from './ExponentStoreReview';\n\n/*\n * Platform must be iOS\n * iOS 10.3 or greater\n * `SKStoreReviewController` class is available\n */\nexport function isSupported() {\n  return ExponentStoreReview && ExponentStoreReview.isSupported;\n}\n\n/*\n * Use the iOS `SKStoreReviewController` API to prompt a user rating without leaving the app.\n */\nexport async function requestReview() {\n  if (ExponentStoreReview && ExponentStoreReview.requestReview) {\n    ExponentStoreReview.requestReview();\n  } else {\n    /*\n     * If StoreReview is unavailable then get the store URL from the `app.json` and open to the store.\n     */\n    const url = storeUrl();\n    if (url) {\n      const supported = await Linking.canOpenURL(url);\n      if (!supported) {\n        console.log(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n      } else {\n        return Linking.openURL(url);\n      }\n    } else {\n      // If the store URL is missing, let the dev know.\n      console.log(\n        \"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\"\n      );\n    }\n  }\n}\n\n/*\n * Get your app's store URLs from the `app.json`\n * iOS: https://docs.expo.io/versions/latest/workflow/configuration#appstoreurlurl-to-your-app-on-the-apple-app-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n * Android: https://docs.expo.io/versions/latest/workflow/configuration#playstoreurlurl-to-your-app-on-the-google-play-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n */\nexport function storeUrl() {\n  const { OS } = Platform;\n  if (OS === 'ios') {\n    return Constants.manifest.ios.appStoreUrl;\n  } else if (OS === 'android') {\n    return Constants.manifest.android.playStoreUrl;\n  }\n  throw new Error(`StoreReview.storeUrl() is not supported on ${OS}`);\n}\n\n/*\n * A flag to detect if this module can do anything\n */\nexport function hasAction() {\n  return !!storeUrl() || isSupported();\n}\n"]}