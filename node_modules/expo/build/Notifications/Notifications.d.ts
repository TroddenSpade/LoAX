import { EventSubscription } from 'fbemitter';
declare type Notification = {
    origin: 'selected' | 'received';
    data: any;
    remote: boolean;
    isMultiple: boolean;
};
declare type LocalNotification = {
    title: string;
    body?: string;
    data?: any;
    ios?: {
        sound?: boolean;
    };
    android?: {
        channelId?: string;
        icon?: string;
        color?: string;
        sticky?: boolean;
        link?: string;
        sound?: boolean;
        vibrate?: boolean | number[];
        priority: string;
    };
};
declare type Channel = {
    name: string;
    description?: string;
    priority?: string;
    sound?: boolean;
    vibrate?: boolean | number[];
    badge?: boolean;
};
declare type ActionType = {
    actionId: string;
    buttonTitle: string;
    isDestructive?: boolean;
    isAuthenticationRequired?: boolean;
    textInput?: {
        submitButtonTitle: string;
        placeholder: string;
    };
};
declare const _default: {
    _setInitialNotification(notification: Notification): void;
    createCategoryAsync(categoryId: string, actions: ActionType[]): Promise<void>;
    deleteCategoryAsync(categoryId: string): Promise<void>;
    getExpoPushTokenAsync(): Promise<string>;
    getDevicePushTokenAsync: (config: {
        gcmSenderId?: string | undefined;
    }) => Promise<{
        type: string;
        data: string;
    }>;
    createChannelAndroidAsync(id: string, channel: Channel): Promise<void>;
    deleteChannelAndroidAsync(id: string): Promise<void>;
    presentLocalNotificationAsync(notification: LocalNotification): Promise<import("react").ReactText>;
    scheduleLocalNotificationAsync(notification: LocalNotification, options?: {
        time?: number | Date | undefined;
        repeat?: "minute" | "hour" | "day" | "week" | "month" | "year" | undefined;
        intervalMs?: number | undefined;
    }): Promise<import("react").ReactText>;
    dismissNotificationAsync(notificationId: import("react").ReactText): Promise<void>;
    dismissAllNotificationsAsync(): Promise<void>;
    cancelScheduledNotificationAsync(notificationId: import("react").ReactText): Promise<void>;
    cancelAllScheduledNotificationsAsync(): Promise<void>;
    addListener(listener: Function): EventSubscription;
    getBadgeNumberAsync(): Promise<number>;
    setBadgeNumberAsync(number: number): Promise<void>;
};
export default _default;
