{"version":3,"file":"Util.js","sourceRoot":"","sources":["../src/Util.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAqB,MAAM,WAAW,CAAC;AAC5D,OAAO,EAAE,kBAAkB,EAAE,MAAM,cAAc,CAAC;AAElD,IAAI,QAA6B,CAAC;AAElC,SAAS,WAAW;IAClB,IAAI,CAAC,QAAQ,EAAE;QACb,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;QAC9B,kBAAkB,CAAC,WAAW,CAAC,6BAA6B,EAAE,wBAAwB,CAAC,CAAC;KACzF;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,SAAS,wBAAwB,CAAC,eAAe;IAC/C,IAAI,OAAO,eAAe,KAAK,QAAQ,EAAE;QACvC,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;KAC/C;IAED,wFAAwF;IACxF,IAAI,eAAe,CAAC,IAAI,KAAK,kBAAkB,EAAE;QAC/C,IAAI,eAAe,CAAC,cAAc,IAAI,OAAO,eAAe,CAAC,cAAc,KAAK,QAAQ,EAAE;YACxF,eAAe,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YACtE,OAAO,eAAe,CAAC,cAAc,CAAC;SACvC;QACD,OAAO,eAAe,CAAC,IAAI,CAAC;QAE5B,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;SAC9E;QACD,QAAQ,CAAC,IAAI,CAAC,qBAAqB,EAAE,eAAe,CAAC,CAAC;KACvD;AACH,CAAC;AAED,MAAM,UAAU,iCAAiC,CAAC,QAAkB;IAClE,OAAO,CAAC,IAAI,CACV,qHAAqH,CACtH,CAAC;IACF,IAAI,OAAO,GAAG,WAAW,EAAE,CAAC;IAC5B,OAAO,OAAO,CAAC,WAAW,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC;AAC9D,CAAC","sourcesContent":["import { EventEmitter, EventSubscription } from 'fbemitter';\nimport { DeviceEventEmitter } from 'react-native';\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    DeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitNewVersionAvailable);\n  }\n  return _emitter;\n}\n\nfunction _emitNewVersionAvailable(newVersionEvent): void {\n  if (typeof newVersionEvent === 'string') {\n    newVersionEvent = JSON.parse(newVersionEvent);\n  }\n\n  // events with type === 'downloadFinished' match the events that were previously emitted\n  if (newVersionEvent.type === 'downloadFinished') {\n    if (newVersionEvent.manifestString && typeof newVersionEvent.manifestString === 'string') {\n      newVersionEvent.manifest = JSON.parse(newVersionEvent.manifestString);\n      delete newVersionEvent.manifestString;\n    }\n    delete newVersionEvent.type;\n\n    if (!_emitter) {\n      throw new Error(`EventEmitter must be initialized to use from its listener`);\n    }\n    _emitter.emit('newVersionAvailable', newVersionEvent);\n  }\n}\n\nexport function addNewVersionListenerExperimental(listener: Function): EventSubscription {\n  console.warn(\n    'Util.addNewVersionListenerExperimental is deprecated and will be removed in SDK 31, use Updates.addListener instead'\n  );\n  let emitter = _getEmitter();\n  return emitter.addListener('newVersionAvailable', listener);\n}\n"]}