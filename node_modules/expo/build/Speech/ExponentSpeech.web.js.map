{"version":3,"file":"ExponentSpeech.web.js","sourceRoot":"","sources":["../../src/Speech/ExponentSpeech.web.ts"],"names":[],"mappings":"AAEA,eAAe;IACb,IAAI,IAAI;QACN,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IACD,KAAK,CAAC,KAAK,CAAC,EAAU,EAAE,IAAY,EAAE,OAAsB;QAC1D,MAAM,EAAE,wBAAwB,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;QAEnD,MAAM,OAAO,GAAG,IAAI,wBAAwB,EAAE,CAAC;QAE/C,IAAI,MAAM,IAAI,OAAO,EAAE;YACrB,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;SAC7B;QACD,IAAI,OAAO,IAAI,OAAO,EAAE;YACtB,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;SAC/B;QACD,IAAI,UAAU,IAAI,OAAO,EAAE;YACzB,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC;SACjC;QACD,IAAI,QAAQ,IAAI,OAAO,EAAE;YACvB,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;SACjC;QACD,IAAI,aAAa,IAAI,OAAO,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;YAC3D,MAAM,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC;YAClD,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;SACvF;QACD,IAAI,SAAS,IAAI,OAAO,EAAE;YACxB,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;SACnC;QACD,IAAI,QAAQ,IAAI,OAAO,EAAE;YACvB,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC;SAChC;QACD,IAAI,SAAS,IAAI,OAAO,EAAE;YACxB,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;SACnC;QACD,IAAI,SAAS,IAAI,OAAO,EAAE;YACxB,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;SACnC;QACD,IAAI,UAAU,IAAI,OAAO,EAAE;YACzB,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;SACrC;QACD,IAAI,QAAQ,IAAI,OAAO,EAAE;YACvB,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;SACjC;QACD,IAAI,YAAY,IAAI,OAAO,EAAE;YAC3B,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;SACzC;QACD,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;QACpB,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEtC,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,UAAU;QACd,OAAO,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC;IACzC,CAAC;IACD,KAAK,CAAC,IAAI;QACR,OAAO,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;IACzC,CAAC;IACD,KAAK,CAAC,KAAK;QACT,OAAO,MAAM,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;IACxC,CAAC;IACD,KAAK,CAAC,MAAM;QACV,OAAO,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;IACzC,CAAC;CACF,CAAC","sourcesContent":["import { SpeechOptions } from './Speech.types';\n\nexport default {\n  get name(): string {\n    return 'ExponentSpeech';\n  },\n  async speak(id: string, text: string, options: SpeechOptions): Promise<SpeechSynthesisUtterance> {\n    const { SpeechSynthesisUtterance } = global.window;\n\n    const message = new SpeechSynthesisUtterance();\n\n    if ('rate' in options) {\n      message.rate = options.rate;\n    }\n    if ('pitch' in options) {\n      message.pitch = options.pitch;\n    }\n    if ('language' in options) {\n      message.lang = options.language;\n    }\n    if ('volume' in options) {\n      message.volume = options.volume;\n    }\n    if ('_voiceIndex' in options && options._voiceIndex != null) {\n      const voices = window.speechSynthesis.getVoices();\n      message.voice = voices[Math.min(voices.length - 1, Math.max(0, options._voiceIndex))];\n    }\n    if ('onStart' in options) {\n      message.onstart = options.onStart;\n    }\n    if ('onDone' in options) {\n      message.onend = options.onDone;\n    }\n    if ('onError' in options) {\n      message.onerror = options.onError;\n    }\n    if ('onPause' in options) {\n      message.onpause = options.onPause;\n    }\n    if ('onResume' in options) {\n      message.onresume = options.onResume;\n    }\n    if ('onMark' in options) {\n      message.onmark = options.onMark;\n    }\n    if ('onBoundary' in options) {\n      message.onboundary = options.onBoundary;\n    }\n    message.text = text;\n    window.speechSynthesis.speak(message);\n\n    return message;\n  },\n  async isSpeaking(): Promise<Boolean> {\n    return window.speechSynthesis.speaking;\n  },\n  async stop(): Promise<void> {\n    return window.speechSynthesis.cancel();\n  },\n  async pause(): Promise<void> {\n    return window.speechSynthesis.pause();\n  },\n  async resume(): Promise<void> {\n    return window.speechSynthesis.resume();\n  },\n};\n"]}