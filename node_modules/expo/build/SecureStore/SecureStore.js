import { UnavailabilityError } from 'expo-errors';
import invariant from 'invariant';
import ExponentSecureStore from './ExponentSecureStore';
export const AFTER_FIRST_UNLOCK = ExponentSecureStore.AFTER_FIRST_UNLOCK;
export const AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = ExponentSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;
export const ALWAYS = ExponentSecureStore.ALWAYS;
export const WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = ExponentSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;
export const ALWAYS_THIS_DEVICE_ONLY = ExponentSecureStore.ALWAYS_THIS_DEVICE_ONLY;
export const WHEN_UNLOCKED = ExponentSecureStore.WHEN_UNLOCKED;
export const WHEN_UNLOCKED_THIS_DEVICE_ONLY = ExponentSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;
export async function deleteItemAsync(key, options = {}) {
    _ensureValidKey(key);
    if (!ExponentSecureStore.deleteValueWithKeyAsync) {
        throw new UnavailabilityError('SecureStore', 'deleteItemAsync');
    }
    await ExponentSecureStore.deleteValueWithKeyAsync(key, options);
}
export async function getItemAsync(key, options = {}) {
    _ensureValidKey(key);
    return await ExponentSecureStore.getValueWithKeyAsync(key, options);
}
export async function setItemAsync(key, value, options = {}) {
    _ensureValidKey(key);
    if (!_isValidValue(value)) {
        throw new Error(`Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.`);
    }
    if (!ExponentSecureStore.setValueWithKeyAsync) {
        throw new UnavailabilityError('SecureStore', 'setItemAsync');
    }
    await ExponentSecureStore.setValueWithKeyAsync(value, key, options);
}
function _ensureValidKey(key) {
    invariant(_isValidKey(key), `Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, ".", "-", and "_".`);
}
function _isValidKey(key) {
    return typeof key === 'string' && /^[\w.-]+$/.test(key);
}
function _isValidValue(value) {
    return typeof value === 'string';
}
//# sourceMappingURL=SecureStore.js.map