{"version":3,"file":"SecureStore.js","sourceRoot":"","sources":["../../src/SecureStore/SecureStore.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,aAAa,CAAC;AAClD,OAAO,SAAS,MAAM,WAAW,CAAC;AAClC,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AAIxD,MAAM,CAAC,MAAM,kBAAkB,GAC7B,mBAAmB,CAAC,kBAAkB,CAAC;AACzC,MAAM,CAAC,MAAM,mCAAmC,GAC9C,mBAAmB,CAAC,mCAAmC,CAAC;AAC1D,MAAM,CAAC,MAAM,MAAM,GAAkC,mBAAmB,CAAC,MAAM,CAAC;AAChF,MAAM,CAAC,MAAM,kCAAkC,GAC7C,mBAAmB,CAAC,kCAAkC,CAAC;AACzD,MAAM,CAAC,MAAM,uBAAuB,GAClC,mBAAmB,CAAC,uBAAuB,CAAC;AAC9C,MAAM,CAAC,MAAM,aAAa,GAAkC,mBAAmB,CAAC,aAAa,CAAC;AAC9F,MAAM,CAAC,MAAM,8BAA8B,GACzC,mBAAmB,CAAC,8BAA8B,CAAC;AAOrD,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,GAAW,EACX,UAA8B,EAAE;IAEhC,eAAe,CAAC,GAAG,CAAC,CAAC;IAErB,IAAI,CAAC,mBAAmB,CAAC,uBAAuB,EAAE;QAChD,MAAM,IAAI,mBAAmB,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC;KACjE;IACD,MAAM,mBAAmB,CAAC,uBAAuB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAClE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,GAAW,EACX,UAA8B,EAAE;IAEhC,eAAe,CAAC,GAAG,CAAC,CAAC;IACrB,OAAO,MAAM,mBAAmB,CAAC,oBAAoB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AACtE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,GAAW,EACX,KAAa,EACb,UAA8B,EAAE;IAEhC,eAAe,CAAC,GAAG,CAAC,CAAC;IACrB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;QACzB,MAAM,IAAI,KAAK,CACb,6HAA6H,CAC9H,CAAC;KACH;IACD,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,EAAE;QAC7C,MAAM,IAAI,mBAAmB,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;KAC9D;IACD,MAAM,mBAAmB,CAAC,oBAAoB,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;AACtE,CAAC;AAED,SAAS,eAAe,CAAC,GAAW;IAClC,SAAS,CACP,WAAW,CAAC,GAAG,CAAC,EAChB,0HAA0H,CAC3H,CAAC;AACJ,CAAC;AAED,SAAS,WAAW,CAAC,GAAW;IAC9B,OAAO,OAAO,GAAG,KAAK,QAAQ,IAAI,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1D,CAAC;AAED,SAAS,aAAa,CAAC,KAAa;IAClC,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC;AACnC,CAAC","sourcesContent":["import { UnavailabilityError } from 'expo-errors';\nimport invariant from 'invariant';\nimport ExponentSecureStore from './ExponentSecureStore';\n\nexport type KeychainAccessibilityConstant = number;\n\nexport const AFTER_FIRST_UNLOCK: KeychainAccessibilityConstant =\n  ExponentSecureStore.AFTER_FIRST_UNLOCK;\nexport const AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExponentSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;\nexport const ALWAYS: KeychainAccessibilityConstant = ExponentSecureStore.ALWAYS;\nexport const WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExponentSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;\nexport const ALWAYS_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExponentSecureStore.ALWAYS_THIS_DEVICE_ONLY;\nexport const WHEN_UNLOCKED: KeychainAccessibilityConstant = ExponentSecureStore.WHEN_UNLOCKED;\nexport const WHEN_UNLOCKED_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExponentSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;\n\nexport type SecureStoreOptions = {\n  keychainService?: string;\n  keychainAccessible?: KeychainAccessibilityConstant;\n};\n\nexport async function deleteItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  _ensureValidKey(key);\n\n  if (!ExponentSecureStore.deleteValueWithKeyAsync) {\n    throw new UnavailabilityError('SecureStore', 'deleteItemAsync');\n  }\n  await ExponentSecureStore.deleteValueWithKeyAsync(key, options);\n}\n\nexport async function getItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<string | null> {\n  _ensureValidKey(key);\n  return await ExponentSecureStore.getValueWithKeyAsync(key, options);\n}\n\nexport async function setItemAsync(\n  key: string,\n  value: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  _ensureValidKey(key);\n  if (!_isValidValue(value)) {\n    throw new Error(\n      `Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.`\n    );\n  }\n  if (!ExponentSecureStore.setValueWithKeyAsync) {\n    throw new UnavailabilityError('SecureStore', 'setItemAsync');\n  }\n  await ExponentSecureStore.setValueWithKeyAsync(value, key, options);\n}\n\nfunction _ensureValidKey(key: string) {\n  invariant(\n    _isValidKey(key),\n    `Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \".\", \"-\", and \"_\".`\n  );\n}\n\nfunction _isValidKey(key: string) {\n  return typeof key === 'string' && /^[\\w.-]+$/.test(key);\n}\n\nfunction _isValidValue(value: string) {\n  return typeof value === 'string';\n}\n"]}