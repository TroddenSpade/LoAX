{"version":3,"file":"AdTriggerView.js","sourceRoot":"","sources":["../../src/facebook-ads/AdTriggerView.tsx"],"names":[],"mappings":"AAAA,OAAO,UAAU,MAAM,YAAY,CAAC;AACpC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAEhD,OAAO,EAAE,oBAAoB,EAA6B,MAAM,gBAAgB,CAAC;AAUjF,MAAM,CAAC,OAAO,OAAO,aAEnB,SAAQ,KAAK,CAAC,SAAgC;IAFhD;;QAGE,aAAQ,GAA8B,IAAI,CAAC;IAqD7C,CAAC;IAnDC,MAAM;QACJ,OAAO,CACL,CAAC,oBAAoB,CAAC,QAAQ,CAC5B;QAAA,CAAC,CAAC,YAA8C,EAAE,EAAE;YAClD,IAAI,OAAO,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC;YAEvC,2EAA2E;YAC3E,IAAI,cAAc,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC/C,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE;gBAC5C,sFAAsF;gBACtF,GAAG,EAAE,CAAC,SAAoC,EAAQ,EAAE;oBAClD,IAAI,SAAS,EAAE;wBACb,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;wBAC1B,OAAO,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;qBACtC;yBAAM;wBACL,OAAO,CAAC,mBAAmB,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACvD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;qBACtB;gBACH,CAAC;gBAED,0CAA0C;gBAC1C,OAAO,CAAC,GAAG,IAAW;oBACpB,OAAO,CAAC,WAAW,EAAE,CAAC;oBAEtB,IAAI,cAAc,CAAC,OAAO,EAAE;wBAC1B,OAAO,cAAc,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC;qBACxC;gBACH,CAAC;aACF,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC,KAAK,CAAC,0BAA0B;gBAC1C,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC,KAAK,CAAC;gBAC9C,CAAC,CAAC,IAAI,CAAC,kCAAkC,CAAC,KAAK,CAAC,CAAC;QACrD,CAAC,CACH;MAAA,EAAE,oBAAoB,CAAC,QAAQ,CAAC,CACjC,CAAC;IACJ,CAAC;IAED,6FAA6F;IAC7F,+FAA+F;IAC/F,4BAA4B;IAC5B,kBAAkB;QAChB,IAAI,EAAE,0BAA0B,EAAE,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,KAAY,CAAC;QACjE,OAAO,KAAU,CAAC;IACpB,CAAC;IAED,2EAA2E;IAC3E,kCAAkC,CAAC,KAAQ;QACzC,gFAAgF;QAChF,OAAO,CAAC,gBAAgB,CAAC,IAAI,KAAK,CAAC,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,EAAG,CAAC;IAC7D,CAAC;CACF","sourcesContent":["import nullthrows from 'nullthrows';\nimport React from 'react';\nimport { TouchableOpacity } from 'react-native';\n\nimport { AdTriggerViewContext, AdTriggerViewContextValue } from './withNativeAd';\n\ntype TouchableProps = {\n  onPress?: (...args: any[]) => any;\n};\n\ntype AdTriggerViewProps<P> = {\n  renderInteractiveComponent?: (props: P) => React.ReactElement<P>;\n} & P;\n\nexport default class AdTriggerView<\n  P extends TouchableProps = React.ComponentProps<typeof TouchableOpacity>\n> extends React.Component<AdTriggerViewProps<P>> {\n  _trigger: React.Component<P> | null = null;\n\n  render() {\n    return (\n      <AdTriggerViewContext.Consumer>\n        {(contextValue: AdTriggerViewContextValue | null) => {\n          let context = nullthrows(contextValue);\n\n          // Compute the context-dependent props to pass to the interactive component\n          let forwardedProps = this._getForwardedProps();\n          let props = Object.assign({}, forwardedProps, {\n            // Register the trigger component with the ad manager when it is mounted and unmounted\n            ref: (component: React.Component<P> | null): void => {\n              if (component) {\n                this._trigger = component;\n                context.registerComponent(component);\n              } else {\n                context.unregisterComponent(nullthrows(this._trigger));\n                this._trigger = null;\n              }\n            },\n\n            // Notify the ad manager to trigger the ad\n            onPress(...args: any[]): any {\n              context.onTriggerAd();\n\n              if (forwardedProps.onPress) {\n                return forwardedProps.onPress(...args);\n              }\n            },\n          });\n\n          return this.props.renderInteractiveComponent\n            ? this.props.renderInteractiveComponent(props)\n            : this._renderDefaultInteractiveComponent(props);\n        }}\n      </AdTriggerViewContext.Consumer>\n    );\n  }\n\n  // NOTE: This is a helper method to extract the props to forward to the interactive component\n  // because TypeScript does not currently support rest objects with generic types in some cases,\n  // hence the type assertions\n  _getForwardedProps(): P {\n    let { renderInteractiveComponent, ...props } = this.props as any;\n    return props as P;\n  }\n\n  // TODO: change from TouchableOpacity to a Gesture Handler BorderlessButton\n  _renderDefaultInteractiveComponent(props: P): React.ReactElement<P> {\n    // @ts-ignore: the RN TypeScript declarations are missing the \"collapsable\" prop\n    return <TouchableOpacity {...props} collapsable={false} />;\n  }\n}\n"]}