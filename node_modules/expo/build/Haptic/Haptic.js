import { UnavailabilityError } from 'expo-errors';
import ExponentHaptic from './ExponentHaptic';
/**
 * Notification Feedback Type
 * The type of notification feedback generated by a UINotificationFeedbackGenerator object.
 * https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype
 */
export var NotificationFeedbackType;
(function (NotificationFeedbackType) {
    /**
     * A notification feedback type indicating that a task has completed successfully
     */
    NotificationFeedbackType["Success"] = "success";
    /**
     * A notification feedback type indicating that a task has produced a warning
     */
    NotificationFeedbackType["Warning"] = "warning";
    /**
     * A notification feedback type indicating that a task has failed
     */
    NotificationFeedbackType["Error"] = "error";
})(NotificationFeedbackType || (NotificationFeedbackType = {}));
/**
 * Impact Feedback Style
 * The mass of the objects in the collision simulated by a UIImpactFeedbackGenerator object.
 * https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle
 */
export var ImpactFeedbackStyle;
(function (ImpactFeedbackStyle) {
    /**
     * A collision between small, light user interface elements
     */
    ImpactFeedbackStyle["Light"] = "light";
    /**
     * A collision between moderately sized user interface elements
     */
    ImpactFeedbackStyle["Medium"] = "medium";
    /**
     * A collision between large, heavy user interface elements
     */
    ImpactFeedbackStyle["Heavy"] = "heavy";
})(ImpactFeedbackStyle || (ImpactFeedbackStyle = {}));
/**
 * Triggers notification feedback.
 */
export function notification(type = NotificationFeedbackType.Success) {
    if (!ExponentHaptic || ExponentHaptic.notification) {
        throw new UnavailabilityError('Haptic', 'notification');
    }
    return ExponentHaptic.notification(type);
}
/**
 * Triggers impact feedback.
 */
export function impact(style = ImpactFeedbackStyle.Medium) {
    if (!ExponentHaptic || !ExponentHaptic.impact) {
        throw new UnavailabilityError('Haptic', 'impact');
    }
    return ExponentHaptic.impact(style);
}
/**
 * Triggers selection feedback.
 */
export function selection() {
    if (!ExponentHaptic || !ExponentHaptic.selection) {
        throw new UnavailabilityError('Haptic', 'selection');
    }
    return ExponentHaptic.selection();
}
//# sourceMappingURL=Haptic.js.map