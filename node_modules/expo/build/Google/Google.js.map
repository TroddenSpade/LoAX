{"version":3,"file":"Google.js","sourceRoot":"","sources":["../../src/Google/Google.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AACxC,OAAO,SAAS,MAAM,gBAAgB,CAAC;AACvC,OAAO,EAAE,mBAAmB,EAAE,MAAM,aAAa,CAAC;AAClD,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AA6BxC,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,MAAmB;IAClD,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;QACtB,MAAM,IAAI,mBAAmB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;KACxD;IAED,MAAM,EAAE,QAAQ,GAAG,KAAK,EAAE,GAAG,MAAM,CAAC;IAEpC,IAAI,QAAQ,KAAK,KAAK,EAAE;QACtB,IAAI,SAAS,CAAC,YAAY,KAAK,MAAM,EAAE;YACrC,OAAO,CAAC,IAAI,CACV,6FAA6F,CAC9F,CAAC;SACH;aAAM;YACL,OAAO,CAAC,IAAI,CACV,8HAA8H,CAC/H,CAAC;SACH;KACF;IAED,MAAM,iBAAiB,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;IAC9C,yDAAyD;IACzD,MAAM,cAAc,GAAG,CAAC,GAAG,iBAAiB,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC5E,uBAAuB;IACvB,MAAM,MAAM,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;IAE5C,6DAA6D;IAC7D,MAAM,QAAQ,GACZ,MAAM,CAAC,QAAQ;QACf,QAAQ,CAAC,MAAM,CAAC;YACd,GAAG,EAAE,MAAM,CAAC,WAAW;YACvB,OAAO,EAAE,MAAM,CAAC,eAAe;YAC/B,GAAG,EAAE,MAAM,CAAC,QAAQ;SACrB,CAAC,CAAC;IAEL,IAAI;QACF,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,SAAS,CAAC;YAC1C,MAAM,EAAE,6BAA6B;YACrC,MAAM;YACN,QAAQ;SACT,CAAC,CAAC;QAEH,6FAA6F;QAC7F,QAAQ;QACR,MAAM,gBAAgB,GAAG,MAAM,KAAK,CAAC,2CAA2C,EAAE;YAChF,OAAO,EAAE,EAAE,aAAa,EAAE,UAAU,WAAW,CAAC,WAAW,EAAE,EAAE;SAChE,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,gBAAgB,CAAC,IAAI,EAAE,CAAC;QAC/C,OAAO;YACL,IAAI,EAAE,SAAS;YACf,GAAG,WAAW;YACd,IAAI,EAAE;gBACJ,EAAE,EAAE,QAAQ,CAAC,EAAE;gBACf,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,SAAS,EAAE,QAAQ,CAAC,UAAU;gBAC9B,UAAU,EAAE,QAAQ,CAAC,WAAW;gBAChC,QAAQ,EAAE,QAAQ,CAAC,OAAO;gBAC1B,KAAK,EAAE,QAAQ,CAAC,KAAK;aACtB;SACF,CAAC;KACH;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,EAAE;YAC9D,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;SAC3B;QACD,MAAM,KAAK,CAAC;KACb;AACH,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,EAAE,WAAW,EAAE,QAAQ,EAAE;IACzD,MAAM,MAAM,GAAG;QACb,MAAM,EAAE,6BAA6B;QACrC,QAAQ;KACT,CAAC;IAEF,OAAO,MAAM,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE;QACvC,KAAK,EAAE,WAAW;QAClB,kBAAkB,EAAE,CAAC,CAAC,QAAQ;KAC/B,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { AppAuth } from 'expo-app-auth';\nimport Constants from 'expo-constants';\nimport { UnavailabilityError } from 'expo-errors';\nimport { Platform } from 'react-native';\n\ntype LogInConfig = {\n  androidClientId?: string;\n  iosClientId?: string;\n  clientId?: string;\n  behavior?: 'system' | 'web';\n  scopes?: string[];\n};\n\ntype LogInResult =\n  | {\n      type: 'cancel';\n    }\n  | {\n      type: 'success';\n      accessToken?: string;\n      idToken: string | null;\n      refreshToken: string | null;\n      user: {\n        id?: string;\n        name?: string;\n        givenName?: string;\n        familyName?: string;\n        photoUrl?: string;\n        email?: string;\n      };\n    };\n\nexport async function logInAsync(config: LogInConfig): Promise<LogInResult> {\n  if (!AppAuth.authAsync) {\n    throw new UnavailabilityError('AppAuth', 'logInAsync');\n  }\n\n  const { behavior = 'web' } = config;\n\n  if (behavior !== 'web') {\n    if (Constants.appOwnership === 'expo') {\n      console.warn(\n        'Native Google Sign-In is only available in ExpoKit projects. Falling back to `web` behavior'\n      );\n    } else {\n      console.warn(\n        \"Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior\"\n      );\n    }\n  }\n\n  const userDefinedScopes = config.scopes || [];\n  /* Add the required scopes for returning profile data. */\n  const requiredScopes = [...userDefinedScopes, 'profile', 'email', 'openid'];\n  /* Remove duplicates */\n  const scopes = [...new Set(requiredScopes)];\n\n  /* This is the CLIENT_ID generated from a Firebase project */\n  const clientId =\n    config.clientId ||\n    Platform.select({\n      ios: config.iosClientId,\n      android: config.androidClientId,\n      web: config.clientId,\n    });\n\n  try {\n    const logInResult = await AppAuth.authAsync({\n      issuer: 'https://accounts.google.com',\n      scopes,\n      clientId,\n    });\n\n    // Web login only returns an accessToken so use it to fetch the same info as the native login\n    // does.\n    const userInfoResponse = await fetch('https://www.googleapis.com/userinfo/v2/me', {\n      headers: { Authorization: `Bearer ${logInResult.accessToken}` },\n    });\n    const userInfo = await userInfoResponse.json();\n    return {\n      type: 'success',\n      ...logInResult,\n      user: {\n        id: userInfo.id,\n        name: userInfo.name,\n        givenName: userInfo.given_name,\n        familyName: userInfo.family_name,\n        photoUrl: userInfo.picture,\n        email: userInfo.email,\n      },\n    };\n  } catch (error) {\n    if (error.message.toLowerCase().indexOf('user cancelled') > -1) {\n      return { type: 'cancel' };\n    }\n    throw error;\n  }\n}\n\nexport async function logOutAsync({ accessToken, clientId }): Promise<any> {\n  const config = {\n    issuer: 'https://accounts.google.com',\n    clientId,\n  };\n\n  return await AppAuth.revokeAsync(config, {\n    token: accessToken,\n    isClientIdProvided: !!clientId,\n  });\n}\n"]}