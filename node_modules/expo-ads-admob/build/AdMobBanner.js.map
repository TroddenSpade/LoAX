{"version":3,"file":"AdMobBanner.js","sourceRoot":"","sources":["../src/AdMobBanner.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,MAAM,WAAW,CAAC;AACrD,OAAO,SAAS,MAAM,YAAY,CAAC;AACnC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAiDnD,MAAM,CAAC,OAAO,OAAO,WAAY,SAAQ,KAAK,CAAC,SAA+B;IAA9E;;QAwBE,UAAK,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QAEtB,sBAAiB,GAAG,CAAC,EAAE,WAAW,EAAsD,EAAE,EAAE;YAC1F,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC;YACtC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;QAC9C,CAAC,CAAC;QAEF,uCAAkC,GAAG,CAAC,EAAE,WAAW,EAAsC,EAAE,EAAE,CAC3F,IAAI,CAAC,KAAK,CAAC,6BAA6B;YACxC,IAAI,CAAC,KAAK,CAAC,6BAA6B,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAqBhE,CAAC;IAnBC,MAAM;QACJ,OAAO,CACL,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAC5B;QAAA,CAAC,cAAc,CACb,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CACxB,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAC9B,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAClC,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CACtC,YAAY,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CACrC,oBAAoB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,CACtD,6BAA6B,CAAC,CAAC,IAAI,CAAC,kCAAkC,CAAC,CACvE,yBAAyB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAChE,yBAAyB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAChE,wBAAwB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAC9D,4BAA4B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,4BAA4B,CAAC,EAE1E;MAAA,EAAE,IAAI,CAAC,CACR,CAAC;IACJ,CAAC;;AApDM,qBAAS,GAAG;IACjB,UAAU,EAAE,SAAS,CAAC,KAAK,CAAC;QAC1B,QAAQ;QACR,aAAa;QACb,iBAAiB;QACjB,YAAY;QACZ,aAAa;QACb,qBAAqB;QACrB,sBAAsB;KACvB,CAAC;IACF,QAAQ,EAAE,SAAS,CAAC,MAAM;IAC1B,YAAY,EAAE,SAAS,CAAC,MAAM;IAC9B,oBAAoB,EAAE,SAAS,CAAC,IAAI;IACpC,6BAA6B,EAAE,SAAS,CAAC,IAAI;IAC7C,yBAAyB,EAAE,SAAS,CAAC,IAAI;IACzC,yBAAyB,EAAE,SAAS,CAAC,IAAI;IACzC,wBAAwB,EAAE,SAAS,CAAC,IAAI;IACxC,4BAA4B,EAAE,SAAS,CAAC,IAAI;IAC5C,GAAG,aAAa;CACjB,CAAC;AAEK,wBAAY,GAAG,EAAE,UAAU,EAAE,qBAAqB,EAAE,CAAC;AAkC9D,MAAM,cAAc,GAAG,wBAAwB,CAAC,wBAAwB,CAAC,CAAC","sourcesContent":["import { requireNativeViewManager } from 'expo-core';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { View, ViewPropTypes } from 'react-native';\n\ntype PropsType = React.ComponentProps<typeof View> & {\n  /**\n   * AdMob iOS library banner size constants\n   * (https://developers.google.com/admob/ios/banner)\n   * banner (320x50, Standard Banner for Phones and Tablets)\n   * largeBanner (320x100, Large Banner for Phones and Tablets)\n   * mediumRectangle (300x250, IAB Medium Rectangle for Phones and Tablets)\n   * fullBanner (468x60, IAB Full-Size Banner for Tablets)\n   * leaderboard (728x90, IAB Leaderboard for Tablets)\n   * smartBannerPortrait (Screen width x 32|50|90, Smart Banner for Phones and Tablets)\n   * smartBannerLandscape (Screen width x 32|50|90, Smart Banner for Phones and Tablets)\n   *\n   * banner is default\n   */\n  bannerSize:\n    | 'banner'\n    | 'largeBanner'\n    | 'mediumRectangle'\n    | 'fullBanner'\n    | 'leaderboard'\n    | 'smartBannerPortrait'\n    | 'smartBannerLandscape',\n  /**\n   * AdMob ad unit ID\n   */\n  adUnitID?: string,\n\n  /**\n   * Test device ID\n   */\n  testDeviceID?: string,\n\n  /**\n   * AdMob iOS library events\n   */\n  onAdViewDidReceiveAd?: () => void,\n  onDidFailToReceiveAdWithError?: (string) => void,\n  onAdViewWillPresentScreen?: () => void,\n  onAdViewWillDismissScreen?: () => void,\n  onAdViewDidDismissScreen?: () => void,\n  onAdViewWillLeaveApplication?: () => void,\n};\n\ntype StateType = {\n  style: { width?: number, height?: number },\n};\n\nexport default class AdMobBanner extends React.Component<PropsType, StateType> {\n  static propTypes = {\n    bannerSize: PropTypes.oneOf([\n      'banner',\n      'largeBanner',\n      'mediumRectangle',\n      'fullBanner',\n      'leaderboard',\n      'smartBannerPortrait',\n      'smartBannerLandscape',\n    ]),\n    adUnitID: PropTypes.string,\n    testDeviceID: PropTypes.string,\n    onAdViewDidReceiveAd: PropTypes.func,\n    onDidFailToReceiveAdWithError: PropTypes.func,\n    onAdViewWillPresentScreen: PropTypes.func,\n    onAdViewWillDismissScreen: PropTypes.func,\n    onAdViewDidDismissScreen: PropTypes.func,\n    onAdViewWillLeaveApplication: PropTypes.func,\n    ...ViewPropTypes,\n  };\n\n  static defaultProps = { bannerSize: 'smartBannerPortrait' };\n\n  state = { style: {} };\n\n  _handleSizeChange = ({ nativeEvent }: { nativeEvent: { width: number, height: number } }) => {\n    const { height, width } = nativeEvent;\n    this.setState({ style: { width, height } });\n  };\n\n  _handleDidFailToReceiveAdWithError = ({ nativeEvent }: { nativeEvent: { error: string } }) =>\n    this.props.onDidFailToReceiveAdWithError &&\n    this.props.onDidFailToReceiveAdWithError(nativeEvent.error);\n\n  render() {\n    return (\n      <View style={this.props.style}>\n        <ExpoBannerView\n          style={this.state.style}\n          adUnitID={this.props.adUnitID}\n          bannerSize={this.props.bannerSize}\n          testDeviceID={this.props.testDeviceID}\n          onSizeChange={this._handleSizeChange}\n          onAdViewDidReceiveAd={this.props.onAdViewDidReceiveAd}\n          onDidFailToReceiveAdWithError={this._handleDidFailToReceiveAdWithError}\n          onAdViewWillPresentScreen={this.props.onAdViewWillPresentScreen}\n          onAdViewWillDismissScreen={this.props.onAdViewWillDismissScreen}\n          onAdViewDidDismissScreen={this.props.onAdViewDidDismissScreen}\n          onAdViewWillLeaveApplication={this.props.onAdViewWillLeaveApplication}\n        />\n      </View>\n    );\n  }\n}\n\nconst ExpoBannerView = requireNativeViewManager('ExpoAdsAdMobBannerView');\n"]}