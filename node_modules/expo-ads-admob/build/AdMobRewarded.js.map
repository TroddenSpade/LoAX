{"version":3,"file":"AdMobRewarded.js","sourceRoot":"","sources":["../src/AdMobRewarded.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Subscription } from 'expo-core';\nimport { UnavailabilityError } from 'expo-errors';\n\nimport AdMobNativeModule from './ExpoAdsAdMobRewardedVideoAdManager';\n\nconst moduleName = 'AdMobRewarded';\n\nconst eventNames = [\n  'rewardedVideoDidRewardUser',\n  'rewardedVideoDidLoad',\n  'rewardedVideoDidFailToLoad',\n  'rewardedVideoDidOpen',\n  'rewardedVideoDidStart',\n  'rewardedVideoDidClose',\n  'rewardedVideoWillLeaveApplication',\n];\n\ntype EventNameType =\n  | 'rewardedVideoDidRewardUser'\n  | 'rewardedVideoDidLoad'\n  | 'rewardedVideoDidFailToLoad'\n  | 'rewardedVideoDidOpen'\n  | 'rewardedVideoDidStart'\n  | 'rewardedVideoDidClose'\n  | 'rewardedVideoWillLeaveApplication';\n\nconst eventEmitter = new EventEmitter(AdMobNativeModule);\n\ntype EventListener = (...args: any[]) => void;\n\nconst eventHandlers: { [eventName: string]: Map<EventListener, Subscription> } = {};\n\nfor (const eventName of eventNames) {\n  eventHandlers[eventName] = new Map();\n}\n\nexport default {\n  async setAdUnitID(id: string): Promise<void> {\n    if (!AdMobNativeModule.setAdUnitID) {\n      throw new UnavailabilityError(moduleName, 'setAdUnitID');\n    }\n\n    await AdMobNativeModule.setAdUnitID(id);\n  },\n  async setTestDeviceID(id: string): Promise<void> {\n    if (!AdMobNativeModule.setTestDeviceID) {\n      throw new UnavailabilityError(moduleName, 'setTestDeviceID');\n    }\n\n    await AdMobNativeModule.setTestDeviceID(id);\n  },\n  async requestAdAsync(): Promise<void> {\n    if (!AdMobNativeModule.requestAd) {\n      throw new UnavailabilityError(moduleName, 'requestAdAsync');\n    }\n\n    await AdMobNativeModule.requestAd();\n  },\n  async showAdAsync(): Promise<void> {\n    if (!AdMobNativeModule.showAd) {\n      throw new UnavailabilityError(moduleName, 'showAdAsync');\n    }\n\n    await AdMobNativeModule.showAd();\n  },\n  async dismissAdAsync(): Promise<void> {\n    if (!AdMobNativeModule.dismissAd) {\n      throw new UnavailabilityError(moduleName, 'dismissAdAsync');\n    }\n\n    await AdMobNativeModule.dismissAd();\n  },\n  async getIsReadyAsync(): Promise<boolean> {\n    if (!AdMobNativeModule.getIsReady) {\n      throw new UnavailabilityError(moduleName, 'getIsReadyAsync');\n    }\n\n    return await AdMobNativeModule.getIsReady();\n  },\n  addEventListener(type: EventNameType, handler: EventListener) {\n    if (eventNames.includes(type)) {\n      eventHandlers[type].set(handler, eventEmitter.addListener(type, handler));\n    } else {\n      console.log(`Event with type ${type} does not exist.`);\n    }\n  },\n  removeEventListener(type: EventNameType, handler: EventListener) {\n    const eventSubscription = eventHandlers[type].get(handler);\n    if (!eventHandlers[type].has(handler) || !eventSubscription) {\n      return;\n    }\n    eventSubscription.remove();\n    eventHandlers[type].delete(handler);\n  },\n  removeAllListeners() {\n    for (const eventName of eventNames) {\n      eventEmitter.removeAllListeners(eventName);\n    }\n  },\n};\n"]}